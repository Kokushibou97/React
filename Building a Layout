Main navigation 
Promo (main advertisement)
A list of newest posts' previews (intros)
The footer 

*Organizing the Code:
They suggest two approaches:
                         Grouping by features 
                        Grouping by file type


*Building The App:
npm init react-app customizing-example
This will produce a brand-new starter app with a familiar structure.
Inspecting the src folder of the starter app, it looks like this:
src/
    App.js
    App.test.js
    index.css
    index.js
    logo.svg
    reportWebVitals.js
    setupTests.js


Then simply add a components folder to it, like this:
src/
    components/
    App.js
    App.test.js
    index.css
    index.js
    logo.svg
    reportWebVitals.js
    setupTests.js

Since the components folder is currently empty, it could be added a component for each of the sections of the typography-focused blog. 
Here's the structural update:
src/
    components/
        Nav.js
        Promo.js
        Intro1.js
        Intro2.js
        Intro3.js
        Footer.js
    App.js
    App.test.js
    index.css
    index.js
    logo.svg
    reportWebVitals.js
    setupTests.js


*Building Components:
Heres' the contents of the Nav.js file:
function Nav() {
    return (
        <nav className="main-nav">
            <ul>
                <li>Home</li>
                <li>Articles</li>
                <li>About</li>
                <li>Contact</li>
            </ul>
        </nav>
    );
};

export default Nav;


Next, you can focus on the Promo.js file:
function Promo() {
    return (
        <div className="promo-section">
            <div>
                <h1>Don't miss this deal!</h1>
                </div>
                <div>
                <h2>Subscribe to my newsletter and get all the shop items at 50% off!</h2>
            </div>
        </div>
    );
};

export default Promo;

Here's Intro1.js:
function Intro1() {
    return (
        <div className="blog-post-intro">
            <h2>I've become a React developer!</h2>
            <div>
                <p>I've completed the React Basics course and I'm happy to announce that I'm now a Junior React Developer!</p>
                <p className="link">Read more...</p>
            </div>
        </div>
    );
};

export default Intro1;

Here's the code for the Intro2.js component:
function Intro2() {
    return (
        <div className="blog-post-intro">
            <h2>Why I love front-end web development</h2>
            <div>
                <p>In this blog post, I'll list 10 reasons why I love to work as a front-end developer.</p>
                <p className="link">Read more...</p>
            </div>
        </div>
    );
};

export default Intro2;


It can finish the previews for my blog posts with the code for Intro3.js component:
function Intro3() {
    return (
        <div className="blog-post-intro">
            <h2>What's the best way to style your React apps?</h2>
            <div>
                <p>There are so many options to choose from. Here's a high-level overview of the popular ones.</p>
                <p className="link">Read more...</p>
            </div>
        </div>
    );
};

export default Intro3;


There's just one more thing left to code, the Footer component, so here it is:
function Footer() {
    return (
        <div className="copyright">
            <p>Made with love by Myself</p>
        </div>
    );
};

export default Footer;

Why use the className attribute in the JSX syntax?
with JSX, it looks like HTML so much that it's easy to forget that it's actually JavaScript code - not HTML.
While regular HTML does indeed have a class attribute, which is used to list one or more CSS classes to be used on a given HTML element, this cannot really work in JSX. 
The reason is that JSX is a special kind of JavaScript syntax, and the word class is a reserved keyword in JSX. 
That's why the React team had to make a compromise and so className is used in JSX to list one or more CSS classes to be used on a given element or component.
