The JavaScript language comes with a built-in error handling syntax, the try...catch syntax.
Let’s examine an example of an error in JavaScript:
(5).toUpperCase()

Obviously, you cannot uppercase a number value, and thus, this throws the following error:
Uncaught TypeError: 5.toUpperCase is not a function

To handle this TypeError, you can update the code with a try...catch block that instructs the code to continue running after the error is encountered:
try {
    (5).toUpperCase();
} 
catch(e) {
    console.log(`Oops, you can't uppercase a number. 
        Trying to do it resulted in the following`, e);
}

The try-catch block will output some text in the console:

Oops, you can't uppercase a number. Trying to do it resulted in the following TypeError: 5.toUpperCase is not a function

It is assumed that if you are taking this course that you are already familiar with how the try...catch syntax works, so I won't go into any details after this quick refresher.

Back to React, here's an example of a simple error in a React component:

function NumBillboard(props) {
    return (
      <>
        <h1>{prop.num}</h1>
      </>
    )
  }

export default NumBillboard;


n React, an error in the code, such as the one above, will result in the error overlay showing in the app in the browser.

In this specific example, the error would be:

       ReferenceError

       prop is not defined

Note: You can click the X button to close the error overlay.

Since event-handling errors occur after the UI has already been rendered, all you have to do is use the error-handling mechanism that already exists in JavaScript – that is, you just use the try...catch blocks.

